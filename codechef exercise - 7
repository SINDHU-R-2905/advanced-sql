1.Combining tables with SQL
Ok - lets use the concept.

Write a query which does the following

Join the tables 'student' and 'course'
Uses 'Course_id' to match both the tables and output the joined table
Output all entries from the joined table

select 
s.St_id,
s.St_Name,
s.Department,
s.Course_id,
c.Course_id,
c.Course_Name,
c.Credits,
c.Prof_id
from student s
join course c
on s.Course_id = c.Course_id;

4.Problem - Correlated Subqueries
Let us find out more details about highly rated dishes.

Task
Write a query to do the following. Try and use the concept of sub-queries.

You need to output details of the dish - 'f_name', 'f_cost' and 'f_type' ONLY if the following condition is satisfied
Average rating of the dish is greater than or equal to 4
Expected output
┌─────────────────┬────────┬─────────────┐
│     f_name      │ f_cost │   f_type    │
├─────────────────┼────────┼─────────────┤
│ Pizza           │ 10     │ Continental │
│ Fried Rice      │ 12     │ Chinese     │
│ Pad Thai        │ 14     │ Thai        │
│ Sushi           │ 20     │ Japanese    │
│ Beef Stroganoff │ 18     │ Russian     │
│ Paella          │ 25     │ Spanish     │
└─────────────────┴────────┴─────────────┘
Table Formats
Table 'food' has the following columns:

f_id (int)
f_name (text)
f_cost (int)
f_type (int).
Table 'ratings' has the following columns:

f_id (int)
f_rating (text).


select f.f_name,f.f_cost,f.f_type
from food f
where (
select avg(cast(r.f_rating AS float))
from ratings r
where r.f_id = f.f_id
) >= 4;





2.Inner Joins
In the previous problem our task was to join the table 'student' and 'course'.
There could be cases where none of the students has opted for a particular course.

In such cases, when the tables are joined, the rows which does not match are excluded by default.
The row which has the name of the course which IS NOT opted by any of the student WILL BE EXCLUDED when both the tables are joined.
When the tables are joined in this manner its called Inner Joins.

Task
Write a query to do the following

Join the tables 'student' and 'course' and output all its entries.
Check if you can find the course with id ENG201 in the output.
Expected output

St_id	St_Name	Department	Course_id	Course_id	Course_Name	Credits	Prof_id
1002	Emily Brown	History	HIS102	HIS102	World History II	3	2004
1005	Michael Chen	Biology	BIO103	BIO103	Principles of Biology	4	2005



select 
s.St_id,
s.St_Name,
s.Department,
s.Course_id,
c.Course_id,
c.Course_Name,
c.Credits,
c.Prof_id
from student s
join course c
on c.Course_id = s.Course_id;

3.Project - Temporary table with Join
Let us try and identify our 3 most revenue generating customers.

Task
Write a query which does the following

Identify the 3 highest value purchases from 'Purchase' using WITH and store them as 'top_purchase'
Join 'Customer' and 'Top_purchase' on the column 'Customer_id'
Output all entries in the joined table
Expected output
┌─────────────┬───────────────┬─────────────┬─────────────┬──────────────┐
│ Customer_id │ Customer_Name │ Purchase_id │ Customer_id │ Purchase_Amt │
├─────────────┼───────────────┼─────────────┼─────────────┼──────────────┤
│ 5           │ Michael Kim   │ 175         │ 5           │ 300          │
│ 2           │ Mary Johnson  │ 142         │ 2           │ 200          │
│ 1           │ John Smith    │ 121         │ 1           │ 100          │
└─────────────┴───────────────┴─────────────┴─────────────┴──────────────┘
Your database 'Customer' has the following columns

Customer_id (INT)
Customer_Name (VARCHAR)
Your database 'Purchase' has the following columns

Purchase_id (INT)
Customer_id (INT)
Purchase_Amt (INT)

WITH top_purchase AS (
select 

Purchase_id,
Customer_id,
Purchase_Amt
from Purchase
order by Purchase_Amt desc
limit 3
)

select

c.Customer_id,
c.Customer_Name,
t.Purchase_id,
t.Customer_id,
t.Purchase_Amt
from Customer c
join top_purchase t
on c.Customer_id = t.Customer_id;
